kind: job
metadata:
  name: train-sentiment-analysis
  tag: ''
  hash: 7342f7f2712547536f59005ee750b513467d9aac
  project: stocks
spec:
  command: ''
  args: []
  image: mlrun/ml-models-gpu
  env: []
  resources:
    limits:
      nvidia.com/gpu: 1
  default_handler: train_sentiment_analysis_model
  entry_points:
    forward:
      name: forward
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: input_ids
        default: ''
      - name: attention_mask
        default: ''
      outputs:
      - default: ''
      lineno: 26
    score_to_sents:
      name: score_to_sents
      doc: ''
      parameters:
      - name: score
        default: ''
      outputs:
      - default: ''
      lineno: 61
    create_data_loader:
      name: create_data_loader
      doc: ''
      parameters:
      - name: df
        default: ''
      - name: tokenizer
        default: ''
      - name: max_len
        default: ''
      - name: batch_size
        default: ''
      outputs:
      - default: ''
      lineno: 68
    train_epoch:
      name: train_epoch
      doc: ''
      parameters:
      - name: model
        default: ''
      - name: data_loader
        default: ''
      - name: criterion
        default: ''
      - name: optimizer
        default: ''
      - name: scheduler
        default: ''
      - name: n_examples
        default: ''
      - name: device
        default: ''
      outputs:
      - default: ''
      lineno: 77
    eval_model:
      name: eval_model
      doc: ''
      parameters:
      - name: model
        default: ''
      - name: data_loader
        default: ''
      - name: criterion
        default: ''
      - name: n_examples
        default: ''
      - name: device
        default: ''
      outputs:
      - default: ''
      lineno: 115
    eval_on_test:
      name: eval_on_test
      doc: ''
      parameters:
      - name: model_path
        default: ''
      - name: data_loader
        default: ''
      - name: device
        default: ''
      - name: n_examples
        default: ''
      - name: pretrained_model
        default: ''
      - name: n_classes
        default: ''
      outputs:
      - default: ''
      lineno: 147
    train_sentiment_analysis_model:
      name: train_sentiment_analysis_model
      doc: ''
      parameters:
      - name: context
        type: MLClientCtx
        default: ''
      - name: reviews_dataset
        type: DataItem
        default: ''
      - name: pretrained_model
        type: str
        default: bert-base-cased
      - name: models_dir
        type: str
        default: models
      - name: model_filename
        type: str
        default: bert_sentiment_analysis_model.pt
      - name: n_classes
        type: int
        default: 3
      - name: MAX_LEN
        type: int
        default: 128
      - name: BATCH_SIZE
        type: int
        default: 16
      - name: EPOCHS
        type: int
        default: 50
      - name: random_state
        type: int
        default: 42
      outputs:
      - default: ''
      lineno: 172
  description: ''
  build:
    functionSourceCode: 
    commands:
    - python -m pip install transformers==3.0.1 torch
    code_origin: https://github.com/mlrun/demo-stocks#54a200e6bae00b5326962ff38745046541d84bfc:train_sentiment_analysis.ipynb
